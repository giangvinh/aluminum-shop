{"version":3,"sources":["../../js/snippetPreview.js"],"names":["Object","defineProperty","exports","value","isEmpty","require","isElement","isUndefined","clone","defaultsDeep","forEach","debounce","createWordRegex","stripHTMLTags","stripFullTags","stripSpaces","replaceDiacritics","transliterate","templates","snippetEditorTemplate","snippetEditor","hiddenElement","hiddenSpan","SnippetPreviewToggler","domManipulation","config_1","defaults","data","title","metaDesc","urlPath","titleWidth","metaHeight","placeholder","defaultValue","baseURL","callbacks","saveSnippetData","addTrailingSlash","metaDescriptionDate","previewMode","titleMaxLength","maximumMetaDescriptionLength","default","maxMeta","inputPreviewBindings","preview","inputField","getBaseURL","opts","hasApp","refObj","rawData","baseUrl","retrieveUnformattedText","key","updateUnformattedText","element","input","hasTrailingSlash","url","indexOf","length","hasProgressSupport","progressElement","document","createElement","max","rateTitleLength","titleLength","rating","rateMetaDescLength","metaDescLength","updateProgressBar","maximum","barElement","progress","allClasses","removeClasses","addClass","getElementsByClassName","style","width","SnippetPreview","analyzerApp","i18n","snippetTitle","snippetCite","snippetMeta","metaTitle","targetElement","Error","_currentFocus","_currentHover","unformattedText","get","bind","set","prototype","renderTemplate","innerHTML","raw","meta","rendered","formatTitle","formatUrl","formatCite","formatMeta","edit","dgettext","slug","metaDescription","save","snippetPreview","titleLabel","slugLabel","metaDescriptionLabel","snippetPreviewDescription","desktopPreviewMode","mobilePreviewMode","isScrollableHint","measurers","getElementById","urlBase","container","formContainer","editToggle","closeEditor","formFields","label","parentNode","initPreviewToggler","setInitialView","opened","createMeasurementElements","updateProgressBars","snippetPreviewToggle","initialize","bindEvents","refresh","output","htmlOutput","renderOutput","renderSnippetStyle","measureTitle","measureMetaDescription","getAnalyzerTitle","hasPluggable","pluggable","_applyModifications","getAnalyzerMetaDesc","getAnalyzerData","call","callRegisteredEventBinder","bindElementEvents","init","cite","html","loaded","replace","keyword","formatKeywordUrl","getMetaText","substring","formatKeyword","metaText","excerpt","text","getIndexMatches","indexMatches","i","match","push","getPeriodMatches","periodMatches","textString","keywordRegex","str","transliterateKeyword","locale","dashedKeyword","metaDescElement","removeClass","reRender","checkTextLength","event","currentTarget","textContent","id","className","YoastSEO","app","snippet_meta","snippet_title","getUnformattedText","currentElement","setUnformattedText","elem","validateFields","metaDescriptionRating","titleRating","previewWidth","getBoundingClientRect","setVisibility","handleWindowResizing","setScrollHintVisibility","elems","addEventListener","changedInput","toggleEditor","window","binding","previewElement","inputElement","openEditor","focus","_updateFocusCarets","_updateHoverCarets","updateDataFromDOM","setAttribute","focusedLabel","focusedPreview","hoveredLabel","setTitle","setUrlPath","setMetaDescription","metaDescriptionElement","spanHolder","offsetWidth","whiteSpace","body","appendChild","childNodes","metaHeightElement","offsetHeight","getTitleWidth","setTitleWidth","disableEnter","ev","textFeedback","showEditIcon","hideEditIcon","setFocus","module"],"mappings":"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","file":"snippetPreview.js","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar isEmpty = require(\"lodash/isEmpty\");\nvar isElement = require(\"lodash/isElement\");\nvar isUndefined = require(\"lodash/isUndefined\");\nvar clone = require(\"lodash/clone\");\nvar defaultsDeep = require(\"lodash/defaultsDeep\");\nvar forEach = require(\"lodash/forEach\");\nvar debounce = require(\"lodash/debounce\");\nvar createWordRegex = require(\"./stringProcessing/createWordRegex.js\");\nvar stripHTMLTags = require(\"./stringProcessing/stripHTMLTags.js\").stripFullTags;\nvar stripSpaces = require(\"./stringProcessing/stripSpaces.js\");\nvar replaceDiacritics = require(\"./stringProcessing/replaceDiacritics.js\");\nvar transliterate = require(\"./stringProcessing/transliterate.js\");\nvar templates = require(\"./templates.js\");\nvar snippetEditorTemplate = templates.snippetEditor;\nvar hiddenElement = templates.hiddenSpan;\nvar SnippetPreviewToggler = require(\"./snippetPreviewToggler\");\nvar domManipulation = require(\"./helpers/domManipulation.js\");\nconst config_1 = require(\"./config/config\");\nvar defaults = {\n    data: {\n        title: \"\",\n        metaDesc: \"\",\n        urlPath: \"\",\n        titleWidth: 0,\n        metaHeight: 0,\n    },\n    placeholder: {\n        title: \"This is an example title - edit by clicking here\",\n        metaDesc: \"Modify your meta description by editing it right here\",\n        urlPath: \"example-post/\",\n    },\n    defaultValue: {\n        title: \"\",\n        metaDesc: \"\",\n    },\n    baseURL: \"http://example.com/\",\n    callbacks: {\n        saveSnippetData: function () { },\n    },\n    addTrailingSlash: true,\n    metaDescriptionDate: \"\",\n    previewMode: \"desktop\",\n};\nvar titleMaxLength = 600;\nconst maximumMetaDescriptionLength = config_1.default.maxMeta;\nvar inputPreviewBindings = [\n    {\n        preview: \"title_container\",\n        inputField: \"title\",\n    },\n    {\n        preview: \"url_container\",\n        inputField: \"urlPath\",\n    },\n    {\n        preview: \"meta_container\",\n        inputField: \"metaDesc\",\n    },\n];\n/**\n * Get's the base URL for this instance of the Snippet Preview.\n *\n * @private\n * @this SnippetPreview\n *\n * @returns {string} The base URL.\n */\nvar getBaseURL = function () {\n    var baseURL = this.opts.baseURL;\n    /*\n     * For backwards compatibility, if no URL was passed to the snippet editor we try to retrieve the base URL from the\n     * rawData in the App. This is because the scrapers used to be responsible for retrieving the baseURL, but the base\n     * URL is static so we can just pass it to the snippet editor.\n     */\n    if (this.hasApp() && !isEmpty(this.refObj.rawData.baseUrl) && this.opts.baseURL === defaults.baseURL) {\n        baseURL = this.refObj.rawData.baseUrl;\n    }\n    return baseURL;\n};\n/**\n * Retrieves unformatted text from the data object\n *\n * @private\n * @this SnippetPreview\n *\n * @param {string} key The key to retrieve.\n *\n * @returns {string} The unformatted text.\n */\nfunction retrieveUnformattedText(key) {\n    return this.data[key];\n}\n/**\n * Update data and DOM objects when the unformatted text is updated, here for backwards compatibility\n *\n * @private\n * @this SnippetPreview\n *\n * @param {string} key The data key to update.\n * @param {string} value The value to update.\n *\n * @returns {void}\n */\nfunction updateUnformattedText(key, value) {\n    this.element.input[key].value = value;\n    this.data[key] = value;\n}\n/**\n * Returns if a url has a trailing slash or not.\n *\n * @param {string} url The url to check for a trailing slash.\n *\n * @returns {boolean} Whether or not the url contains a trailing slash.\n */\nfunction hasTrailingSlash(url) {\n    return url.indexOf(\"/\") === (url.length - 1);\n}\n/**\n * Detects if this browser has <progress> support. Also serves as a poor man's HTML5shiv.\n *\n * @private\n *\n * @returns {boolean} Whether or not the browser supports a <progress> element\n */\nfunction hasProgressSupport() {\n    var progressElement = document.createElement(\"progress\");\n    return !isUndefined(progressElement.max);\n}\n/**\n * Returns a rating based on the length of the title\n *\n * @param {number} titleLength the length of the title.\n *\n * @returns {string} The rating given based on the title length.\n */\nfunction rateTitleLength(titleLength) {\n    var rating;\n    switch (true) {\n        case titleLength > 0 && titleLength <= 399:\n        case titleLength > 600:\n            rating = \"ok\";\n            break;\n        case titleLength >= 400 && titleLength <= 600:\n            rating = \"good\";\n            break;\n        default:\n            rating = \"bad\";\n            break;\n    }\n    return rating;\n}\n/**\n * Returns a rating based on the length of the meta description\n *\n * @param {number} metaDescLength the length of the meta description.\n *\n * @returns {string} The rating given based on the description length.\n */\nfunction rateMetaDescLength(metaDescLength) {\n    var rating;\n    switch (true) {\n        case metaDescLength > 0 && metaDescLength < 120:\n        case metaDescLength > maximumMetaDescriptionLength:\n            rating = \"ok\";\n            break;\n        case metaDescLength >= 120 && metaDescLength <= maximumMetaDescriptionLength:\n            rating = \"good\";\n            break;\n        default:\n            rating = \"bad\";\n            break;\n    }\n    return rating;\n}\n/**\n * Updates a progress bar\n *\n * @private\n * @this SnippetPreview\n *\n * @param {HTMLElement} element The progress element that's rendered.\n * @param {number} value The current value.\n * @param {number} maximum The maximum allowed value.\n * @param {string} rating The SEO score rating for this value.\n *\n * @returns {void}\n */\nfunction updateProgressBar(element, value, maximum, rating) {\n    var barElement, progress, allClasses = [\n        \"snippet-editor__progress--bad\",\n        \"snippet-editor__progress--ok\",\n        \"snippet-editor__progress--good\",\n    ];\n    element.value = value;\n    domManipulation.removeClasses(element, allClasses);\n    domManipulation.addClass(element, \"snippet-editor__progress--\" + rating);\n    if (!this.hasProgressSupport) {\n        barElement = element.getElementsByClassName(\"snippet-editor__progress-bar\")[0];\n        progress = (value / maximum) * 100;\n        barElement.style.width = progress + \"%\";\n    }\n}\n/**\n * @module snippetPreview\n */\n/**\n * Defines the config and outputTarget for the SnippetPreview\n *\n * @param {Object}         opts                           - Snippet preview options.\n * @param {App}            opts.analyzerApp               - The app object the Snippet Preview is part of.\n * @param {Object}         opts.placeholder               - The placeholder values for the fields, will be shown as\n * actual placeholders in the inputs and as a fallback for the preview.\n * @param {string}         opts.placeholder.title         - The placeholder title.\n * @param {string}         opts.placeholder.metaDesc      - The placeholder meta description.\n * @param {string}         opts.placeholder.urlPath       - The placeholder url.\n *\n * @param {Object}         opts.defaultValue              - The default value for the fields, if the user has not\n * changed a field, this value will be used for the analyzer, preview and the progress bars.\n * @param {string}         opts.defaultValue.title        - The default title.\n * @param {string}         opts.defaultValue.metaDesc     - The default meta description.\n * it.\n *\n * @param {string}         opts.baseURL                   - The basic URL as it will be displayed in google.\n * @param {HTMLElement}    opts.targetElement             - The target element that contains this snippet editor.\n *\n * @param {Object}         opts.callbacks                 - Functions that are called on specific instances.\n * @param {Function}       opts.callbacks.saveSnippetData - Function called when the snippet data is changed.\n *\n * @param {boolean}        opts.addTrailingSlash          - Whether or not to add a trailing slash to the URL.\n * @param {string}         opts.metaDescriptionDate       - The date to display before the meta description.\n *\n * @param {Jed}            opts.i18n                      - The translation object.\n *\n * @param {string}         opts.previewMode               - The current preview mode.\n *\n * @property {App}         refObj                         - The connected app object.\n * @property {Jed}         i18n                           - The translation object.\n *\n * @property {HTMLElement} targetElement                  - The target element that contains this snippet editor.\n *\n * @property {Object}      element                        - The elements for this snippet editor.\n * @property {Object}      element.rendered               - The rendered elements.\n * @property {HTMLElement} element.rendered.title         - The rendered title element.\n * @property {HTMLElement} element.rendered.urlPath       - The rendered url path element.\n * @property {HTMLElement} element.rendered.urlBase       - The rendered url base element.\n * @property {HTMLElement} element.rendered.metaDesc      - The rendered meta description element.\n *\n * @property {HTMLElement} element.measurers.titleWidth   - The rendered title width element.\n * @property {HTMLElement} element.measurers.metaHeight   - The rendered meta height element.\n *\n * @property {Object}      element.input                  - The input elements.\n * @property {HTMLElement} element.input.title            - The title input element.\n * @property {HTMLElement} element.input.urlPath          - The url path input element.\n * @property {HTMLElement} element.input.metaDesc         - The meta description input element.\n *\n * @property {HTMLElement} element.container              - The main container element.\n * @property {HTMLElement} element.formContainer          - The form container element.\n * @property {HTMLElement} element.editToggle             - The button that toggles the editor form.\n *\n * @property {Object}      data                           - The data for this snippet editor.\n * @property {string}      data.title                     - The title.\n * @property {string}      data.urlPath                   - The url path.\n * @property {string}      data.metaDesc                  - The meta description.\n * @property {int}         data.titleWidth                - The width of the title in pixels.\n * @property {int}         data.metaHeight                - The height of the meta description in pixels.\n *\n * @property {string}      baseURL                        - The basic URL as it will be displayed in google.\n *\n * @property {boolean}     hasProgressSupport             - Whether this browser supports the <progress> element.\n *\n * @constructor\n */\nvar SnippetPreview = function (opts) {\n    defaultsDeep(opts, defaults);\n    this.data = opts.data;\n    if (!isUndefined(opts.analyzerApp)) {\n        this.refObj = opts.analyzerApp;\n        this.i18n = this.refObj.i18n;\n        this.data = {\n            title: this.refObj.rawData.snippetTitle || \"\",\n            urlPath: this.refObj.rawData.snippetCite || \"\",\n            metaDesc: this.refObj.rawData.snippetMeta || \"\",\n        };\n        // For backwards compatibility set the metaTitle as placeholder.\n        if (!isEmpty(this.refObj.rawData.metaTitle)) {\n            opts.placeholder.title = this.refObj.rawData.metaTitle;\n        }\n    }\n    if (!isUndefined(opts.i18n)) {\n        this.i18n = opts.i18n;\n    }\n    if (!isElement(opts.targetElement)) {\n        throw new Error(\"The snippet preview requires a valid target element\");\n    }\n    this.opts = opts;\n    this._currentFocus = null;\n    this._currentHover = null;\n    // For backwards compatibility monitor the unformatted text for changes and reflect them in the preview\n    this.unformattedText = {};\n    Object.defineProperty(this.unformattedText, \"snippet_cite\", {\n        get: retrieveUnformattedText.bind(this, \"urlPath\"),\n        set: updateUnformattedText.bind(this, \"urlPath\"),\n    });\n    Object.defineProperty(this.unformattedText, \"snippet_meta\", {\n        get: retrieveUnformattedText.bind(this, \"metaDesc\"),\n        set: updateUnformattedText.bind(this, \"metaDesc\"),\n    });\n    Object.defineProperty(this.unformattedText, \"snippet_title\", {\n        get: retrieveUnformattedText.bind(this, \"title\"),\n        set: updateUnformattedText.bind(this, \"title\"),\n    });\n};\n/**\n * Renders snippet editor and adds it to the targetElement\n * @returns {void}\n */\nSnippetPreview.prototype.renderTemplate = function () {\n    var targetElement = this.opts.targetElement;\n    targetElement.innerHTML = snippetEditorTemplate({\n        raw: {\n            title: this.data.title,\n            snippetCite: this.data.urlPath,\n            meta: this.data.metaDesc,\n        },\n        rendered: {\n            title: this.formatTitle(),\n            baseUrl: this.formatUrl(),\n            snippetCite: this.formatCite(),\n            meta: this.formatMeta(),\n        },\n        metaDescriptionDate: this.opts.metaDescriptionDate,\n        placeholder: this.opts.placeholder,\n        i18n: {\n            edit: this.i18n.dgettext(\"js-text-analysis\", \"Edit snippet\"),\n            title: this.i18n.dgettext(\"js-text-analysis\", \"SEO title\"),\n            slug: this.i18n.dgettext(\"js-text-analysis\", \"Slug\"),\n            metaDescription: this.i18n.dgettext(\"js-text-analysis\", \"Meta description\"),\n            save: this.i18n.dgettext(\"js-text-analysis\", \"Close snippet editor\"),\n            snippetPreview: this.i18n.dgettext(\"js-text-analysis\", \"Snippet preview\"),\n            titleLabel: this.i18n.dgettext(\"js-text-analysis\", \"SEO title preview:\"),\n            slugLabel: this.i18n.dgettext(\"js-text-analysis\", \"Slug preview:\"),\n            metaDescriptionLabel: this.i18n.dgettext(\"js-text-analysis\", \"Meta description preview:\"),\n            snippetPreviewDescription: this.i18n.dgettext(\"js-text-analysis\", \"You can click on each element in the preview to jump to the Snippet Editor.\"),\n            desktopPreviewMode: this.i18n.dgettext(\"js-text-analysis\", \"Desktop preview\"),\n            mobilePreviewMode: this.i18n.dgettext(\"js-text-analysis\", \"Mobile preview\"),\n            isScrollableHint: this.i18n.dgettext(\"js-text-analysis\", \"Scroll to see the preview content.\"),\n        },\n    });\n    this.element = {\n        measurers: {\n            metaHeight: null,\n        },\n        rendered: {\n            title: document.getElementById(\"snippet_title\"),\n            urlBase: document.getElementById(\"snippet_citeBase\"),\n            urlPath: document.getElementById(\"snippet_cite\"),\n            metaDesc: document.getElementById(\"snippet_meta\"),\n        },\n        input: {\n            title: targetElement.getElementsByClassName(\"js-snippet-editor-title\")[0],\n            urlPath: targetElement.getElementsByClassName(\"js-snippet-editor-slug\")[0],\n            metaDesc: targetElement.getElementsByClassName(\"js-snippet-editor-meta-description\")[0],\n        },\n        progress: {\n            title: targetElement.getElementsByClassName(\"snippet-editor__progress-title\")[0],\n            metaDesc: targetElement.getElementsByClassName(\"snippet-editor__progress-meta-description\")[0],\n        },\n        container: document.getElementById(\"snippet_preview\"),\n        formContainer: targetElement.getElementsByClassName(\"snippet-editor__form\")[0],\n        editToggle: targetElement.getElementsByClassName(\"snippet-editor__edit-button\")[0],\n        closeEditor: targetElement.getElementsByClassName(\"snippet-editor__submit\")[0],\n        formFields: targetElement.getElementsByClassName(\"snippet-editor__form-field\"),\n    };\n    this.element.label = {\n        title: this.element.input.title.parentNode,\n        urlPath: this.element.input.urlPath.parentNode,\n        metaDesc: this.element.input.metaDesc.parentNode,\n    };\n    this.element.preview = {\n        title: this.element.rendered.title.parentNode,\n        urlPath: this.element.rendered.urlPath.parentNode,\n        metaDesc: this.element.rendered.metaDesc.parentNode,\n    };\n    this.hasProgressSupport = hasProgressSupport();\n    if (this.hasProgressSupport) {\n        this.element.progress.title.max = titleMaxLength;\n        this.element.progress.metaDesc.max = maximumMetaDescriptionLength;\n    }\n    else {\n        forEach(this.element.progress, function (progressElement) {\n            domManipulation.addClass(progressElement, \"snippet-editor__progress--fallback\");\n        });\n    }\n    this.initPreviewToggler();\n    this.setInitialView();\n    this.opened = false;\n    this.createMeasurementElements();\n    this.updateProgressBars();\n};\n/**\n * Initializes the Snippet Preview Toggler.\n *\n * @returns {void}\n */\nSnippetPreview.prototype.initPreviewToggler = function () {\n    this.snippetPreviewToggle = new SnippetPreviewToggler(this.opts.previewMode, this.opts.targetElement.getElementsByClassName(\"snippet-editor__view-icon\"));\n    this.snippetPreviewToggle.initialize();\n    this.snippetPreviewToggle.bindEvents();\n};\n/**\n * Refreshes the snippet editor rendered HTML\n * @returns {void}\n */\nSnippetPreview.prototype.refresh = function () {\n    this.output = this.htmlOutput();\n    this.renderOutput();\n    this.renderSnippetStyle();\n    this.measureTitle();\n    this.measureMetaDescription();\n    this.updateProgressBars();\n};\n/**\n * Returns the title as meant for the analyzer\n *\n * @private\n * @this SnippetPreview\n *\n * @returns {string} The title that is meant for the analyzer.\n */\nfunction getAnalyzerTitle() {\n    var title = this.data.title;\n    if (isEmpty(title)) {\n        title = this.opts.defaultValue.title;\n    }\n    if (this.hasPluggable()) {\n        title = this.refObj.pluggable._applyModifications(\"data_page_title\", title);\n    }\n    return stripSpaces(title);\n}\n/**\n * Returns the metaDescription, includes the date if it is set.\n *\n * @private\n * @this SnippetPreview\n *\n * @returns {string} The meta data for the analyzer.\n */\nvar getAnalyzerMetaDesc = function () {\n    var metaDesc = this.data.metaDesc;\n    if (isEmpty(metaDesc)) {\n        metaDesc = this.opts.defaultValue.metaDesc;\n    }\n    if (this.hasPluggable()) {\n        metaDesc = this.refObj.pluggable._applyModifications(\"data_meta_desc\", metaDesc);\n    }\n    if (!isEmpty(this.opts.metaDescriptionDate) && !isEmpty(metaDesc)) {\n        metaDesc = this.opts.metaDescriptionDate + \" - \" + this.data.metaDesc;\n    }\n    return stripSpaces(metaDesc);\n};\n/**\n * Returns the data from the Snippet Preview.\n *\n * @returns {Object} The collected data for the analyzer.\n */\nSnippetPreview.prototype.getAnalyzerData = function () {\n    return {\n        title: getAnalyzerTitle.call(this),\n        url: this.data.urlPath,\n        metaDesc: getAnalyzerMetaDesc.call(this),\n    };\n};\n/**\n * Calls the event binder that has been registered using the callbacks option in the arguments of the App.\n *\n * @returns {void}\n */\nSnippetPreview.prototype.callRegisteredEventBinder = function () {\n    if (this.hasApp()) {\n        this.refObj.callbacks.bindElementEvents(this.refObj);\n    }\n};\n/**\n *  Checks if title and url are set so they can be rendered in the Snippet Preview.\n *\n *  @returns {void}\n */\nSnippetPreview.prototype.init = function () {\n    if (this.hasApp() &&\n        this.refObj.rawData.metaTitle !== null &&\n        this.refObj.rawData.cite !== null) {\n        this.refresh();\n    }\n};\n/**\n * Creates html object to contain the strings for the Snippet Preview.\n *\n * @returns {Object} The HTML output of the collected data.\n */\nSnippetPreview.prototype.htmlOutput = function () {\n    var html = {};\n    html.title = this.formatTitle();\n    html.cite = this.formatCite();\n    html.meta = this.formatMeta();\n    html.url = this.formatUrl();\n    return html;\n};\n/**\n * Formats the title for the Snippet Preview. If title and pageTitle are empty, sampletext is used.\n *\n * @returns {string} The correctly formatted title.\n */\nSnippetPreview.prototype.formatTitle = function () {\n    var title = this.data.title;\n    // Fallback to the default if the title is empty.\n    if (isEmpty(title)) {\n        title = this.opts.defaultValue.title;\n    }\n    // For rendering we can fallback to the placeholder as well.\n    if (isEmpty(title)) {\n        title = this.opts.placeholder.title;\n    }\n    // Apply modification to the title before showing it.\n    if (this.hasPluggable() && this.refObj.pluggable.loaded) {\n        title = this.refObj.pluggable._applyModifications(\"data_page_title\", title);\n    }\n    title = stripHTMLTags(title);\n    // As an ultimate fallback provide the user with a helpful message.\n    if (isEmpty(title)) {\n        title = this.i18n.dgettext(\"js-text-analysis\", \"Please provide an SEO title by editing the snippet below.\");\n    }\n    return title;\n};\n/**\n * Formats the base url for the Snippet Preview. Removes the protocol name from the URL.\n *\n * @returns {string} Formatted base url for the Snippet Preview.\n */\nSnippetPreview.prototype.formatUrl = function () {\n    var url = getBaseURL.call(this);\n    // Removes the http part of the url, google displays https:// if the website supports it.\n    return url.replace(/http:\\/\\//ig, \"\");\n};\n/**\n * Formats the url for the Snippet Preview.\n *\n * @returns {string} Formatted URL for the Snippet Preview.\n */\nSnippetPreview.prototype.formatCite = function () {\n    var cite = this.data.urlPath;\n    cite = replaceDiacritics(stripHTMLTags(cite));\n    // Fallback to the default if the cite is empty.\n    if (isEmpty(cite)) {\n        cite = this.opts.placeholder.urlPath;\n    }\n    if (this.hasApp() && !isEmpty(this.refObj.rawData.keyword)) {\n        cite = this.formatKeywordUrl(cite);\n    }\n    if (this.opts.addTrailingSlash && !hasTrailingSlash(cite)) {\n        cite = cite + \"/\";\n    }\n    // URL's cannot contain whitespace so replace it by dashes.\n    cite = cite.replace(/\\s/g, \"-\");\n    // Strip out question mark and hash characters from the raw URL.\n    cite = cite.replace(/\\?|#/g, \"\");\n    return cite;\n};\n/**\n * Formats the meta description for the Snippet Preview, if it's empty retrieves it using getMetaText.\n *\n * @returns {string} Formatted meta description.\n */\nSnippetPreview.prototype.formatMeta = function () {\n    var meta = this.data.metaDesc;\n    // If no meta has been set, generate one.\n    if (isEmpty(meta)) {\n        meta = this.getMetaText();\n    }\n    // Apply modification to the desc before showing it.\n    if (this.hasPluggable() && this.refObj.pluggable.loaded) {\n        meta = this.refObj.pluggable._applyModifications(\"data_meta_desc\", meta);\n    }\n    meta = stripHTMLTags(meta);\n    // Cut-off the meta description according to the maximum length\n    meta = meta.substring(0, maximumMetaDescriptionLength);\n    if (this.hasApp() && !isEmpty(this.refObj.rawData.keyword)) {\n        meta = this.formatKeyword(meta);\n    }\n    // As an ultimate fallback provide the user with a helpful message.\n    if (isEmpty(meta)) {\n        meta = this.i18n.dgettext(\"js-text-analysis\", \"Please provide a meta description by editing the snippet below.\");\n    }\n    return meta;\n};\n/**\n * Generates a meta description with an educated guess based on the passed text and excerpt.\n * It uses the keyword to select an appropriate part of the text. If the keyword isn't present it takes the maximum\n * meta description length of the text. If both the keyword, text and excerpt are empty this function returns the\n * sample text.\n *\n * @returns {string} A generated meta description.\n */\nSnippetPreview.prototype.getMetaText = function () {\n    var metaText = this.opts.defaultValue.metaDesc;\n    if (this.hasApp() && !isUndefined(this.refObj.rawData.excerpt) && isEmpty(metaText)) {\n        metaText = this.refObj.rawData.excerpt;\n    }\n    if (this.hasApp() && !isUndefined(this.refObj.rawData.text) && isEmpty(metaText)) {\n        metaText = this.refObj.rawData.text;\n        if (this.hasPluggable() && this.refObj.pluggable.loaded) {\n            metaText = this.refObj.pluggable._applyModifications(\"content\", metaText);\n        }\n    }\n    metaText = stripHTMLTags(metaText);\n    return metaText.substring(0, maximumMetaDescriptionLength);\n};\n/**\n * Builds an array with all indexes of the keyword.\n *\n * @returns {Array} Array with matches\n */\nSnippetPreview.prototype.getIndexMatches = function () {\n    var indexMatches = [];\n    var i = 0;\n    // Starts at 0, locates first match of the keyword.\n    var match = this.refObj.rawData.text.indexOf(this.refObj.rawData.keyword, i);\n    // Runs the loop untill no more indexes are found, and match returns -1.\n    while (match > -1) {\n        indexMatches.push(match);\n        // Pushes location to indexMatches and increase i with the length of keyword.\n        i = match + this.refObj.rawData.keyword.length;\n        match = this.refObj.rawData.text.indexOf(this.refObj.rawData.keyword, i);\n    }\n    return indexMatches;\n};\n/**\n * Builds an array with indexes of all sentence ends (select on .).\n *\n * @returns {Array} Array with sentences.\n */\nSnippetPreview.prototype.getPeriodMatches = function () {\n    var periodMatches = [0];\n    var match;\n    var i = 0;\n    while ((match = this.refObj.rawData.text.indexOf(\".\", i)) > -1) {\n        periodMatches.push(match);\n        i = match + 1;\n    }\n    return periodMatches;\n};\n/**\n * Formats the keyword for use in the snippetPreview by adding <strong>-tags\n * strips unwanted characters that could break the regex or give unwanted results.\n *\n * @param {string} textString The keyword string that needs to be formatted.\n *\n * @returns {string} The formatted keyword.\n */\nSnippetPreview.prototype.formatKeyword = function (textString) {\n    // Removes characters from the keyword that could break the regex, or give unwanted results.\n    var keyword = this.refObj.rawData.keyword;\n    // Match keyword case-insensitively.\n    var keywordRegex = createWordRegex(keyword, \"\", false);\n    textString = textString.replace(keywordRegex, function (str) {\n        return \"<strong>\" + str + \"</strong>\";\n    });\n    // Transliterate the keyword for highlighting\n    var transliterateKeyword = transliterate(keyword, this.refObj.rawData.locale);\n    if (transliterateKeyword !== keyword) {\n        keywordRegex = createWordRegex(transliterateKeyword, \"\", false);\n        textString = textString.replace(keywordRegex, function (str) {\n            return \"<strong>\" + str + \"</strong>\";\n        });\n    }\n    return textString;\n};\n/**\n * Formats the keyword for use in the URL by accepting - and _ instead of spaces and by adding <strong>-tags.\n * Strips unwanted characters that could break the regex or give unwanted results.\n *\n * @param {string} textString The keyword string that needs to be formatted.\n *\n * @returns {XML|string|void} The formatted keyword string to be used in the URL.\n */\nSnippetPreview.prototype.formatKeywordUrl = function (textString) {\n    var keyword = this.refObj.rawData.keyword;\n    keyword = transliterate(keyword, this.refObj.rawData.locale);\n    keyword = keyword.replace(/'/, \"\");\n    var dashedKeyword = keyword.replace(/\\s/g, \"-\");\n    // Match keyword case-insensitively.\n    var keywordRegex = createWordRegex(dashedKeyword, \"\\\\-\");\n    // Make the keyword bold in the textString.\n    return textString.replace(keywordRegex, function (str) {\n        return \"<strong>\" + str + \"</strong>\";\n    });\n};\n/**\n * Renders the outputs to the elements on the page.\n *\n * @returns {void}\n */\nSnippetPreview.prototype.renderOutput = function () {\n    this.element.rendered.title.innerHTML = this.output.title;\n    this.element.rendered.urlPath.innerHTML = this.output.cite;\n    this.element.rendered.urlBase.innerHTML = this.output.url;\n    this.element.rendered.metaDesc.innerHTML = this.output.meta;\n};\n/**\n * Makes the rendered meta description gray if no meta description has been set by the user.\n *\n * @returns {void}\n */\nSnippetPreview.prototype.renderSnippetStyle = function () {\n    var metaDescElement = this.element.rendered.metaDesc;\n    var metaDesc = getAnalyzerMetaDesc.call(this);\n    if (isEmpty(metaDesc)) {\n        domManipulation.addClass(metaDescElement, \"desc-render\");\n        domManipulation.removeClass(metaDescElement, \"desc-default\");\n    }\n    else {\n        domManipulation.addClass(metaDescElement, \"desc-default\");\n        domManipulation.removeClass(metaDescElement, \"desc-render\");\n    }\n};\n/**\n * Function to call init, to rerender the Snippet Preview.\n *\n * @returns {void}\n */\nSnippetPreview.prototype.reRender = function () {\n    this.init();\n};\n/**\n * Checks text length of the snippetmeta and snippet title, shortens it if it is too long.\n * @param {Object} event The event to check the text length from.\n *\n * @returns {void}\n */\nSnippetPreview.prototype.checkTextLength = function (event) {\n    var text = event.currentTarget.textContent;\n    switch (event.currentTarget.id) {\n        case \"snippet_meta\":\n            event.currentTarget.className = \"desc\";\n            if (text.length > maximumMetaDescriptionLength) {\n                /* eslint-disable */\n                YoastSEO.app.snippetPreview.unformattedText.snippet_meta = event.currentTarget.textContent;\n                /* eslint-enable */\n                event.currentTarget.textContent = text.substring(0, maximumMetaDescriptionLength);\n            }\n            break;\n        case \"snippet_title\":\n            event.currentTarget.className = \"title\";\n            if (text.length > titleMaxLength) {\n                /* eslint-disable */\n                YoastSEO.app.snippetPreview.unformattedText.snippet_title = event.currentTarget.textContent;\n                /* eslint-enable */\n                event.currentTarget.textContent = text.substring(0, titleMaxLength);\n            }\n            break;\n        default:\n            break;\n    }\n};\n/**\n * Get the unformatted text.\n *\n * When clicking on an element in the Snippet Preview, this checks and fills the textContent with the data from the\n * unformatted text. This removes the keyword highlighting and modified data so the original content can be editted.\n *\n * @param {Object} event The event to get the unformatted text from.\n *\n * @returns {void}\n */\nSnippetPreview.prototype.getUnformattedText = function (event) {\n    var currentElement = event.currentTarget.id;\n    if (typeof this.unformattedText[currentElement] !== \"undefined\") {\n        event.currentTarget.textContent = this.unformattedText[currentElement];\n    }\n};\n/**\n * Sets the unformatted text.\n *\n * When text is entered into the snippetPreview elements, the text is set in the unformattedText object.\n * This allows the visible data to be editted in the snippetPreview.\n *\n * @param {Object} event The event to set the unformatted text from.\n *\n * @returns {void}\n */\nSnippetPreview.prototype.setUnformattedText = function (event) {\n    var elem = event.currentTarget.id;\n    this.unformattedText[elem] = document.getElementById(elem).textContent;\n};\n/**\n * Validates all fields and highlights errors.\n *\n * @returns {void}\n */\nSnippetPreview.prototype.validateFields = function () {\n    var metaDescription = getAnalyzerMetaDesc.call(this);\n    var title = getAnalyzerTitle.call(this);\n    if (metaDescription.length > maximumMetaDescriptionLength) {\n        domManipulation.addClass(this.element.input.metaDesc, \"snippet-editor__field--invalid\");\n    }\n    else {\n        domManipulation.removeClass(this.element.input.metaDesc, \"snippet-editor__field--invalid\");\n    }\n    if (title.length > titleMaxLength) {\n        domManipulation.addClass(this.element.input.title, \"snippet-editor__field--invalid\");\n    }\n    else {\n        domManipulation.removeClass(this.element.input.title, \"snippet-editor__field--invalid\");\n    }\n};\n/**\n * Updates progress bars based on the available data.\n *\n * @returns {void}\n */\nSnippetPreview.prototype.updateProgressBars = function () {\n    var metaDescriptionRating, titleRating, metaDescription;\n    metaDescription = getAnalyzerMetaDesc.call(this);\n    titleRating = rateTitleLength(this.data.titleWidth);\n    metaDescriptionRating = rateMetaDescLength(metaDescription.length);\n    updateProgressBar.call(this, this.element.progress.title, this.data.titleWidth, titleMaxLength, titleRating);\n    updateProgressBar.call(this, this.element.progress.metaDesc, metaDescription.length, maximumMetaDescriptionLength, metaDescriptionRating);\n};\n/**\n * Gets the width of the Snippet Preview to set its initial view to desktop or mobile.\n *\n * @returns {void}\n */\nSnippetPreview.prototype.setInitialView = function () {\n    var previewWidth = document.getElementById(\"snippet_preview\").getBoundingClientRect().width;\n    this.snippetPreviewToggle.setVisibility(previewWidth);\n};\n/**\n * When the window is resized, gets the width of the Snippet Preview to set the Scroll Hint visibility.\n *\n * @returns {void}\n */\nSnippetPreview.prototype.handleWindowResizing = debounce(function () {\n    var previewWidth = document.getElementById(\"snippet_preview\").getBoundingClientRect().width;\n    this.snippetPreviewToggle.setScrollHintVisibility(previewWidth);\n}, 25);\n/**\n * Binds the reloadSnippetText function to the blur of the snippet inputs.\n *\n * @returns {void}\n */\nSnippetPreview.prototype.bindEvents = function () {\n    var targetElement, elems = [\"title\", \"slug\", \"meta-description\"];\n    forEach(elems, function (elem) {\n        targetElement = document.getElementsByClassName(\"js-snippet-editor-\" + elem)[0];\n        targetElement.addEventListener(\"keydown\", this.changedInput.bind(this));\n        targetElement.addEventListener(\"keyup\", this.changedInput.bind(this));\n        targetElement.addEventListener(\"input\", this.changedInput.bind(this));\n        targetElement.addEventListener(\"focus\", this.changedInput.bind(this));\n        targetElement.addEventListener(\"blur\", this.changedInput.bind(this));\n    }.bind(this));\n    this.element.editToggle.addEventListener(\"click\", this.toggleEditor.bind(this));\n    this.element.closeEditor.addEventListener(\"click\", this.closeEditor.bind(this));\n    // Note: `handleWindowResizing` is called also in Yoast SEO when the WP admin menu state changes.\n    window.addEventListener(\"resize\", this.handleWindowResizing.bind(this));\n    // Loop through the bindings and bind a click handler to the click to focus the focus element.\n    forEach(inputPreviewBindings, function (binding) {\n        var previewElement = document.getElementById(binding.preview);\n        var inputElement = this.element.input[binding.inputField];\n        // Make the preview element click open the editor and focus the correct input.\n        previewElement.addEventListener(\"click\", function () {\n            this.openEditor();\n            inputElement.focus();\n        }.bind(this));\n        // Make focusing an input, update the carets.\n        inputElement.addEventListener(\"focus\", function () {\n            this._currentFocus = binding.inputField;\n            this._updateFocusCarets();\n        }.bind(this));\n        // Make removing focus from an element, update the carets.\n        inputElement.addEventListener(\"blur\", function () {\n            this._currentFocus = null;\n            this._updateFocusCarets();\n        }.bind(this));\n        previewElement.addEventListener(\"mouseover\", function () {\n            this._currentHover = binding.inputField;\n            this._updateHoverCarets();\n        }.bind(this));\n        previewElement.addEventListener(\"mouseout\", function () {\n            this._currentHover = null;\n            this._updateHoverCarets();\n        }.bind(this));\n    }.bind(this));\n};\n/**\n * Updates Snippet Preview on changed input. It's debounced so that we can call this function as much as we want.\n *\n * @returns {void}\n */\nSnippetPreview.prototype.changedInput = debounce(function () {\n    this.updateDataFromDOM();\n    this.validateFields();\n    this.updateProgressBars();\n    this.refresh();\n    if (this.hasApp()) {\n        this.refObj.refresh();\n    }\n}, 25);\n/**\n * Updates our data object from the DOM.\n *\n * @returns {void}\n */\nSnippetPreview.prototype.updateDataFromDOM = function () {\n    this.data.title = this.element.input.title.value;\n    this.data.urlPath = this.element.input.urlPath.value;\n    this.data.metaDesc = this.element.input.metaDesc.value;\n    // Clone so the data isn't changeable.\n    this.opts.callbacks.saveSnippetData(clone(this.data));\n};\n/**\n * Opens the snippet editor.\n *\n * @returns {void}\n */\nSnippetPreview.prototype.openEditor = function () {\n    this.element.editToggle.setAttribute(\"aria-expanded\", \"true\");\n    // Show these elements.\n    domManipulation.removeClass(this.element.formContainer, \"snippet-editor--hidden\");\n    this.opened = true;\n};\n/**\n * Closes the snippet editor.\n *\n * @returns {void}\n */\nSnippetPreview.prototype.closeEditor = function () {\n    // Hide these elements.\n    domManipulation.addClass(this.element.formContainer, \"snippet-editor--hidden\");\n    this.element.editToggle.setAttribute(\"aria-expanded\", \"false\");\n    this.element.editToggle.focus();\n    this.opened = false;\n};\n/**\n * Toggles the snippet editor.\n *\n * @returns {void}\n */\nSnippetPreview.prototype.toggleEditor = function () {\n    if (this.opened) {\n        this.closeEditor();\n    }\n    else {\n        this.openEditor();\n    }\n};\n/**\n * Updates carets before the preview and input fields.\n *\n * @private\n *\n * @returns {void}\n */\nSnippetPreview.prototype._updateFocusCarets = function () {\n    var focusedLabel, focusedPreview;\n    // Disable all carets on the labels.\n    forEach(this.element.label, function (element) {\n        domManipulation.removeClass(element, \"snippet-editor__label--focus\");\n    });\n    // Disable all carets on the previews.\n    forEach(this.element.preview, function (element) {\n        domManipulation.removeClass(element, \"snippet-editor__container--focus\");\n    });\n    if (null !== this._currentFocus) {\n        focusedLabel = this.element.label[this._currentFocus];\n        focusedPreview = this.element.preview[this._currentFocus];\n        domManipulation.addClass(focusedLabel, \"snippet-editor__label--focus\");\n        domManipulation.addClass(focusedPreview, \"snippet-editor__container--focus\");\n    }\n};\n/**\n * Updates hover carets before the input fields.\n *\n * @private\n *\n * @returns {void}\n */\nSnippetPreview.prototype._updateHoverCarets = function () {\n    var hoveredLabel;\n    forEach(this.element.label, function (element) {\n        domManipulation.removeClass(element, \"snippet-editor__label--hover\");\n    });\n    if (null !== this._currentHover) {\n        hoveredLabel = this.element.label[this._currentHover];\n        domManipulation.addClass(hoveredLabel, \"snippet-editor__label--hover\");\n    }\n};\n/**\n * Updates the title data and the title input field. This also means the snippet editor view is updated.\n *\n * @param {string} title The title to use in the input field.\n *\n * @returns {void}\n */\nSnippetPreview.prototype.setTitle = function (title) {\n    this.element.input.title.value = title;\n    this.changedInput();\n};\n/**\n * Updates the url path data and the url path input field. This also means the snippet editor view is updated.\n *\n * @param {string} urlPath the URL path to use in the input field.\n *\n * @returns {void}\n */\nSnippetPreview.prototype.setUrlPath = function (urlPath) {\n    this.element.input.urlPath.value = urlPath;\n    this.changedInput();\n};\n/**\n * Updates the meta description data and the meta description input field. This also means the snippet editor view is updated.\n *\n * @param {string} metaDesc the meta description to use in the input field.\n *\n * @returns {void}\n */\nSnippetPreview.prototype.setMetaDescription = function (metaDesc) {\n    this.element.input.metaDesc.value = metaDesc;\n    this.changedInput();\n};\n/**\n * Creates elements with the purpose to calculate the sizes of elements and puts these elements to the body.\n *\n * @returns {void}\n */\nSnippetPreview.prototype.createMeasurementElements = function () {\n    var metaDescriptionElement, spanHolder;\n    metaDescriptionElement = hiddenElement({\n        width: document.getElementById(\"meta_container\").offsetWidth + \"px\",\n        whiteSpace: \"\",\n    });\n    spanHolder = document.createElement(\"div\");\n    spanHolder.className = \"yoast-measurement-elements-holder\";\n    spanHolder.innerHTML = metaDescriptionElement;\n    document.body.appendChild(spanHolder);\n    this.element.measurers.metaHeight = spanHolder.childNodes[0];\n};\n/**\n * Copies the title text to the title measure element to calculate the width in pixels.\n *\n * @returns {void}\n */\nSnippetPreview.prototype.measureTitle = function () {\n    if (this.element.rendered.title.offsetWidth !== 0 || this.element.rendered.title.textContent === \"\") {\n        this.data.titleWidth = this.element.rendered.title.offsetWidth;\n    }\n};\n/**\n * Copies the metadescription text to the metadescription measure element to calculate the height in pixels.\n *\n * @returns {void}\n */\nSnippetPreview.prototype.measureMetaDescription = function () {\n    var metaHeightElement = this.element.measurers.metaHeight;\n    metaHeightElement.innerHTML = this.element.rendered.metaDesc.innerHTML;\n    this.data.metaHeight = metaHeightElement.offsetHeight;\n};\n/**\n * Returns the width of the title in pixels.\n *\n * @returns {Number} The width of the title in pixels.\n */\nSnippetPreview.prototype.getTitleWidth = function () {\n    return this.data.titleWidth;\n};\n/**\n * Allows to manually set the title width.\n *\n * This may be useful in setups where the title field will not always be rendered.\n *\n * @param {Number} titleWidth The width of the title in pixels.\n *\n * @returns {void}\n */\nSnippetPreview.prototype.setTitleWidth = function (titleWidth) {\n    this.data.titleWidth = titleWidth;\n};\n/**\n * Returns whether or not an app object is present.\n *\n * @returns {boolean} Whether or not there is an App object present.\n */\nSnippetPreview.prototype.hasApp = function () {\n    return !isUndefined(this.refObj);\n};\n/**\n * Returns whether or not a pluggable object is present.\n *\n * @returns {boolean} Whether or not there is a Pluggable object present.\n */\nSnippetPreview.prototype.hasPluggable = function () {\n    return !isUndefined(this.refObj) && !isUndefined(this.refObj.pluggable);\n};\n/* eslint-disable */\n/**\n * Disables Enter as input.\n *\n * Used to disable enter as input. Returns false to prevent enter, and preventDefault and\n * cancelBubble to prevent other elements from capturing this event.\n *\n * @deprecated\n *\n * @param {KeyboardEvent} ev The keyboard event.\n */\nSnippetPreview.prototype.disableEnter = function (ev) { };\n/**\n * Adds and removes the tooLong class when a text is too long.\n *\n * @deprecated\n * @param ev The event.\n */\nSnippetPreview.prototype.textFeedback = function (ev) { };\n/**\n * Shows the edit icon corresponding to the hovered element.\n *\n * @deprecated\n *\n * @param ev The event.\n */\nSnippetPreview.prototype.showEditIcon = function (ev) {\n};\n/**\n * Removes all editIcon-classes, sets to snippet_container.\n *\n * @deprecated\n */\nSnippetPreview.prototype.hideEditIcon = function () { };\n/**\n * Sets focus on child element of the snippet_container that is clicked. Hides the editicon.\n *\n * @deprecated\n *\n * @param ev The event.\n */\nSnippetPreview.prototype.setFocus = function (ev) { };\n/* eslint-disable */\nmodule.exports = SnippetPreview;\n//# sourceMappingURL=snippetPreview.js.map"]}