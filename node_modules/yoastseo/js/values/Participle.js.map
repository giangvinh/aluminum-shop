{"version":3,"sources":["../../../js/values/Participle.js"],"names":["getType","require","isSameType","defaults","forEach","defaultAttributes","auxiliaries","type","language","validateAttributes","attributes","attributeValue","attributeName","expectedType","Error","Participle","participle","sentencePart","setParticiple","setSentencePart","_determinesSentencePartIsPassive","_attributes","prototype","_participle","getParticiple","_sentencePart","getSentencePart","getAuxiliaries","getLanguage","determinesSentencePartIsPassive","setSentencePartPassiveness","passive","module","exports"],"mappings":"AAAA;;AACA,IAAIA,UAAUC,QAAQ,uBAAR,EAAiCD,OAA/C;AACA,IAAIE,aAAaD,QAAQ,uBAAR,EAAiCC,UAAlD;AACA,IAAIC,WAAWF,QAAQ,iBAAR,CAAf;AACA,IAAIG,UAAUH,QAAQ,gBAAR,CAAd;AACA;;;;AAIA,IAAII,oBAAoB;AACpBC,iBAAa,EADO;AAEpBC,UAAM,EAFc;AAGpBC,cAAU;AAHU,CAAxB;AAKA;;;;;;AAMA,IAAIC,qBAAqB,SAArBA,kBAAqB,CAAUC,UAAV,EAAsB;AAC3CN,YAAQM,UAAR,EAAoB,UAAUC,cAAV,EAA0BC,aAA1B,EAAyC;AACzD,YAAIC,eAAeb,QAAQK,kBAAkBO,aAAlB,CAAR,CAAnB;AACA,YAAIV,WAAWS,cAAX,EAA2BE,YAA3B,MAA6C,KAAjD,EAAwD;AACpD,kBAAMC,MAAM,eAAeF,aAAf,GAA+B,8BAA/B,GAAgEC,YAAhE,GAA+E,QAA/E,GAA0Fb,QAAQW,cAAR,CAA1F,GAAoH,GAA1H,CAAN;AACH;AACJ,KALD;AAMH,CAPD;AAQA;;;;;;;;AAQA,IAAII,aAAa,SAAbA,UAAa,CAAUC,UAAV,EAAsBC,YAAtB,EAAoCP,UAApC,EAAgD;AAC7D,SAAKQ,aAAL,CAAmBF,UAAnB;AACA,SAAKG,eAAL,CAAqBF,YAArB;AACA,SAAKG,gCAAL,GAAwC,KAAxC;AACAV,iBAAaA,cAAc,EAA3B;AACAP,aAASO,UAAT,EAAqBL,iBAArB;AACAI,uBAAmBC,UAAnB;AACA,SAAKW,WAAL,GAAmBX,UAAnB;AACH,CARD;AASA;;;;;AAKAK,WAAWO,SAAX,CAAqBJ,aAArB,GAAqC,UAAUF,UAAV,EAAsB;AACvD,QAAIA,eAAe,EAAnB,EAAuB;AACnB,cAAMF,MAAM,qCAAN,CAAN;AACH;AACD,SAAKS,WAAL,GAAmBP,UAAnB;AACH,CALD;AAMA;;;;AAIAD,WAAWO,SAAX,CAAqBE,aAArB,GAAqC,YAAY;AAC7C,WAAO,KAAKD,WAAZ;AACH,CAFD;AAGA;;;;;;AAMAR,WAAWO,SAAX,CAAqBH,eAArB,GAAuC,UAAUF,YAAV,EAAwB;AAC3D,QAAIA,iBAAiB,EAArB,EAAyB;AACrB,cAAMH,MAAM,wCAAN,CAAN;AACH;AACD,SAAKW,aAAL,GAAqBR,YAArB;AACH,CALD;AAMA;;;;AAIAF,WAAWO,SAAX,CAAqBI,eAArB,GAAuC,YAAY;AAC/C,WAAO,KAAKD,aAAZ;AACH,CAFD;AAGA;;;;AAIAV,WAAWO,SAAX,CAAqBtB,OAArB,GAA+B,YAAY;AACvC,WAAO,KAAKqB,WAAL,CAAiBd,IAAxB;AACH,CAFD;AAGA;;;;AAIAQ,WAAWO,SAAX,CAAqBK,cAArB,GAAsC,YAAY;AAC9C,WAAO,KAAKN,WAAL,CAAiBf,WAAxB;AACH,CAFD;AAGA;;;;AAIAS,WAAWO,SAAX,CAAqBM,WAArB,GAAmC,YAAY;AAC3C,WAAO,KAAKP,WAAL,CAAiBb,QAAxB;AACH,CAFD;AAGA;;;;AAIAO,WAAWO,SAAX,CAAqBO,+BAArB,GAAuD,YAAY;AAC/D,WAAO,KAAKT,gCAAZ;AACH,CAFD;AAGA;;;;;AAKAL,WAAWO,SAAX,CAAqBQ,0BAArB,GAAkD,UAAUC,OAAV,EAAmB;AACjE,QAAI,CAAC7B,WAAW6B,OAAX,EAAoB,SAApB,CAAL,EAAqC;AACjC,cAAMjB,MAAM,yDAAyDd,QAAQ+B,OAAR,CAAzD,GAA4E,GAAlF,CAAN;AACH;AACD,SAAKX,gCAAL,GAAwCW,OAAxC;AACH,CALD;AAMAC,OAAOC,OAAP,GAAiBlB,UAAjB;AACA","file":"Participle.js","sourcesContent":["\"use strict\";\nvar getType = require(\"./../helpers/types.js\").getType;\nvar isSameType = require(\"./../helpers/types.js\").isSameType;\nvar defaults = require(\"lodash/defaults\");\nvar forEach = require(\"lodash/forEach\");\n/**\n * Default attributes to be used by the Participle if they are left undefined.\n * @type { { auxiliaries: array, type: string } }\n */\nvar defaultAttributes = {\n    auxiliaries: [],\n    type: \"\",\n    language: \"\",\n};\n/**\n * Validates the type of all attributes. Throws an error if the type is invalid.\n *\n * @param {object} attributes The object containing all attributes.\n * @returns {void}\n */\nvar validateAttributes = function (attributes) {\n    forEach(attributes, function (attributeValue, attributeName) {\n        var expectedType = getType(defaultAttributes[attributeName]);\n        if (isSameType(attributeValue, expectedType) === false) {\n            throw Error(\"Attribute \" + attributeName + \" has invalid type. Expected \" + expectedType + \", got \" + getType(attributeValue) + \".\");\n        }\n    });\n};\n/**\n * Construct the Participle object and set the participle, sentence part, auxiliary and type.\n *\n * @param {string} participle The participle.\n * @param {string} sentencePart The sentence part where the participle is from.\n * @param {object} attributes The object containing all attributes.\n * @constructor\n */\nvar Participle = function (participle, sentencePart, attributes) {\n    this.setParticiple(participle);\n    this.setSentencePart(sentencePart);\n    this._determinesSentencePartIsPassive = false;\n    attributes = attributes || {};\n    defaults(attributes, defaultAttributes);\n    validateAttributes(attributes);\n    this._attributes = attributes;\n};\n/**\n * Sets the participle.\n * @param {string} participle The participle.\n * @returns {void}.\n */\nParticiple.prototype.setParticiple = function (participle) {\n    if (participle === \"\") {\n        throw Error(\"The participle should not be empty.\");\n    }\n    this._participle = participle;\n};\n/**\n * Returns the participle.\n * @returns {String} The participle.\n */\nParticiple.prototype.getParticiple = function () {\n    return this._participle;\n};\n/**\n * Sets the SentencePart.\n *\n * @param {string} sentencePart The sentence part.\n * @returns {void}.\n */\nParticiple.prototype.setSentencePart = function (sentencePart) {\n    if (sentencePart === \"\") {\n        throw Error(\"The sentence part should not be empty.\");\n    }\n    this._sentencePart = sentencePart;\n};\n/**\n * Returns the sentence part.\n * @returns {String} The sentence part.\n */\nParticiple.prototype.getSentencePart = function () {\n    return this._sentencePart;\n};\n/**\n * Returns the type.\n * @returns {String} The type.\n */\nParticiple.prototype.getType = function () {\n    return this._attributes.type;\n};\n/**\n * Returns the auxiliaries.\n * @returns {String} The auxiliaries.\n */\nParticiple.prototype.getAuxiliaries = function () {\n    return this._attributes.auxiliaries;\n};\n/**\n * Returns the language.\n * @returns {string} The language.\n */\nParticiple.prototype.getLanguage = function () {\n    return this._attributes.language;\n};\n/**\n * Returns if the participle is passive or not.\n * @returns {boolean} True if it is passive.\n */\nParticiple.prototype.determinesSentencePartIsPassive = function () {\n    return this._determinesSentencePartIsPassive;\n};\n/**\n * Determines if the sentence is passive or not.\n * @param {boolean} passive Whether the sentence part is passive.\n * @returns {void}\n */\nParticiple.prototype.setSentencePartPassiveness = function (passive) {\n    if (!isSameType(passive, \"boolean\")) {\n        throw Error(\"Passiveness had invalid type. Expected boolean, got \" + getType(passive) + \".\");\n    }\n    this._determinesSentencePartIsPassive = passive;\n};\nmodule.exports = Participle;\n//# sourceMappingURL=Participle.js.map"]}