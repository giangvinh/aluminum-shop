"use strict";

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var AssessmentResult = require("../../values/AssessmentResult.js");
var Assessment = require("../../assessment.js");
var inRange = require("lodash/inRange");
var getLanguageAvailability = require("../../helpers/getLanguageAvailability.js");
var availableLanguages = ["en", "nl", "de", "it", "ru"];

var FleschReadingEaseAssessment = function (_Assessment) {
    _inherits(FleschReadingEaseAssessment, _Assessment);

    /**
     * Sets the identifier and the config.
     *
     * @param {Object} config The configuration to use.
     * @returns {void}
     */
    function FleschReadingEaseAssessment(config) {
        _classCallCheck(this, FleschReadingEaseAssessment);

        var _this = _possibleConstructorReturn(this, (FleschReadingEaseAssessment.__proto__ || Object.getPrototypeOf(FleschReadingEaseAssessment)).call(this));

        _this.identifier = "fleschReadingEase";
        _this._config = config;
        return _this;
    }
    /**
     * The assessment that runs the FleschReading on the paper.
     *
     * @param {Object} paper The paper to run this assessment on.
     * @param {Object} researcher The researcher used for the assessment.
     * @param {Object} i18n The i18n-object used for parsing translations.
     *
     * @returns {Object} An assessmentResult with the score and formatted text.
     */


    _createClass(FleschReadingEaseAssessment, [{
        key: "getResult",
        value: function getResult(paper, researcher, i18n) {
            this.fleschReadingResult = researcher.getResearch("calculateFleschReading");
            if (this.isApplicable(paper)) {
                var assessmentResult = new AssessmentResult(i18n);
                var calculatedResult = this.calculateResult(i18n);
                assessmentResult.setScore(calculatedResult.score);
                assessmentResult.setText(calculatedResult.resultText);
                return assessmentResult;
            }
            return null;
        }
        /**
         * Calculates the assessment result based on the fleschReadingScore.
         *
         * @param {Object} i18n The i18n-object used for parsing translations.
         *
         * @returns {Object} Object with score and resultText.
         */

    }, {
        key: "calculateResult",
        value: function calculateResult(i18n) {
            // Results must be between 0 and 100;
            if (this.fleschReadingResult < 0) {
                this.fleschReadingResult = 0;
            }
            if (this.fleschReadingResult > 100) {
                this.fleschReadingResult = 100;
            }
            /* Translators: %1$s expands to the numeric Flesch reading ease score,
            %2$s to a link to a Yoast.com article about Flesch reading ease score,
            %3$s to the easyness of reading,
            %4$s expands to a note about the flesch reading score. */
            var text = i18n.dgettext("js-text-analysis", "The copy scores %1$s in the %2$s test, which is considered %3$s to read. %4$s");
            var url = "<a href='https://yoa.st/flesch-reading' target='_blank'>Flesch Reading Ease</a>";
            if (this.fleschReadingResult > this._config.borders.veryEasy) {
                var _feedback = i18n.dgettext("js-text-analysis", "very easy");
                return {
                    score: this._config.scores.veryEasy,
                    resultText: i18n.sprintf(text, this.fleschReadingResult, url, _feedback, "")
                };
            }
            if (inRange(this.fleschReadingResult, this._config.borders.easy, this._config.borders.veryEasy)) {
                var _feedback2 = i18n.dgettext("js-text-analysis", "easy");
                return {
                    score: this._config.scores.easy,
                    resultText: i18n.sprintf(text, this.fleschReadingResult, url, _feedback2, "")
                };
            }
            if (inRange(this.fleschReadingResult, this._config.borders.fairlyEasy, this._config.borders.easy)) {
                var _feedback3 = i18n.dgettext("js-text-analysis", "fairly easy");
                return {
                    score: this._config.scores.fairlyEasy,
                    resultText: i18n.sprintf(text, this.fleschReadingResult, url, _feedback3, "")
                };
            }
            if (inRange(this.fleschReadingResult, this._config.borders.okay, this._config.borders.fairlyEasy)) {
                var _feedback4 = i18n.dgettext("js-text-analysis", "ok");
                return {
                    score: this._config.scores.okay,
                    resultText: i18n.sprintf(text, this.fleschReadingResult, url, _feedback4, "")
                };
            }
            if (inRange(this.fleschReadingResult, this._config.borders.fairlyDifficult, this._config.borders.okay)) {
                var _feedback5 = i18n.dgettext("js-text-analysis", "fairly difficult");
                var _note = i18n.dgettext("js-text-analysis", "Try to make shorter sentences to improve readability.");
                return {
                    score: this._config.scores.fairlyDifficult,
                    resultText: i18n.sprintf(text, this.fleschReadingResult, url, _feedback5, _note)
                };
            }
            if (inRange(this.fleschReadingResult, this._config.borders.difficult, this._config.borders.fairlyDifficult)) {
                var _feedback6 = i18n.dgettext("js-text-analysis", "difficult");
                var _note2 = i18n.dgettext("js-text-analysis", "Try to make shorter sentences, using less difficult words to improve readability.");
                return {
                    score: this._config.scores.difficult,
                    resultText: i18n.sprintf(text, this.fleschReadingResult, url, _feedback6, _note2)
                };
            }
            var feedback = i18n.dgettext("js-text-analysis", "very difficult");
            var note = i18n.dgettext("js-text-analysis", "Try to make shorter sentences, using less difficult words to improve readability.");
            return {
                score: this._config.scores.veryDifficult,
                resultText: i18n.sprintf(text, this.fleschReadingResult, url, feedback, note)
            };
        }
        /**
         * Checks if Flesch reading analysis is available for the language of the paper.
         *
         * @param {Object} paper The paper to have the Flesch score to be calculated for.
         * @returns {boolean} Returns true if the language is available and the paper is not empty.
         */

    }, {
        key: "isApplicable",
        value: function isApplicable(paper) {
            var isLanguageAvailable = getLanguageAvailability(paper.getLocale(), availableLanguages);
            return isLanguageAvailable && paper.hasText();
        }
    }]);

    return FleschReadingEaseAssessment;
}(Assessment);

module.exports = FleschReadingEaseAssessment;
//# sourceMappingURL=fleschReadingEaseAssessment.js.map
//# sourceMappingURL=fleschReadingEaseAssessment.js.map
