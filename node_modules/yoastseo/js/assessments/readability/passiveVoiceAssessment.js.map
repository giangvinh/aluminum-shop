{"version":3,"sources":["../../../../js/assessments/readability/passiveVoiceAssessment.js"],"names":["AssessmentResult","require","formatNumber","inRange","inRangeEndInclusive","stripTags","stripIncompleteTags","Mark","marker","map","getLanguageAvailability","availableLanguages","calculatePassiveVoiceResult","passiveVoice","i18n","score","percentage","recommendedValue","passiveVoiceURL","hasMarks","total","passives","length","text","sprintf","dgettext","passiveVoiceMarker","paper","researcher","getResearch","sentence","marked","original","passiveVoiceAssessment","passiveVoiceResult","assessmentResult","setScore","setText","setHasMarks","module","exports","identifier","getResult","isApplicable","isLanguageAvailable","getLocale","hasText","getMarks"],"mappings":"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","file":"passiveVoiceAssessment.js","sourcesContent":["\"use strict\";\nconst AssessmentResult = require(\"../../values/AssessmentResult.js\");\nconst formatNumber = require(\"../../helpers/formatNumber.js\");\nconst inRange = require(\"../../helpers/inRange.js\").inRangeEndInclusive;\nconst stripTags = require(\"../../stringProcessing/stripHTMLTags\").stripIncompleteTags;\nconst Mark = require(\"../../values/Mark.js\");\nconst marker = require(\"../../markers/addMark.js\");\nconst map = require(\"lodash/map\");\nconst getLanguageAvailability = require(\"../../helpers/getLanguageAvailability.js\");\nconst availableLanguages = [\"en\", \"de\", \"fr\", \"es\", \"ru\"];\n/**\n * Calculates the result based on the number of sentences and passives.\n * @param {object} passiveVoice The object containing the number of sentences and passives\n * @param {object} i18n The object used for translations.\n * @returns {{score: number, text}} resultobject with score and text.\n */\nlet calculatePassiveVoiceResult = function (passiveVoice, i18n) {\n    let score;\n    let percentage = 0;\n    let recommendedValue = 10;\n    let passiveVoiceURL = \"<a href='https://yoa.st/passive-voice' target='_blank'>\";\n    let hasMarks;\n    // Prevent division by zero errors.\n    if (passiveVoice.total !== 0) {\n        percentage = formatNumber((passiveVoice.passives.length / passiveVoice.total) * 100);\n    }\n    hasMarks = (percentage > 0);\n    if (percentage <= 10) {\n        // Green indicator.\n        score = 9;\n    }\n    if (inRange(percentage, 10, 15)) {\n        // Orange indicator.\n        score = 6;\n    }\n    if (percentage > 15) {\n        // Red indicator.\n        score = 3;\n    }\n    if (score >= 7) {\n        return {\n            score: score,\n            hasMarks: hasMarks,\n            text: i18n.sprintf(i18n.dgettext(\"js-text-analysis\", \n            // Translators: %1$s expands to the number of sentences in passive voice, %2$s expands to a link on yoast.com,\n            // %3$s expands to the anchor end tag, %4$s expands to the recommended value.\n            \"%1$s of the sentences contain %2$spassive voice%3$s, \" +\n                \"which is less than or equal to the recommended maximum of %4$s.\"), percentage + \"%\", passiveVoiceURL, \"</a>\", recommendedValue + \"%\"),\n        };\n    }\n    return {\n        score: score,\n        hasMarks: hasMarks,\n        text: i18n.sprintf(i18n.dgettext(\"js-text-analysis\", \n        // Translators: %1$s expands to the number of sentences in passive voice, %2$s expands to a link on yoast.com,\n        // %3$s expands to the anchor end tag, %4$s expands to the recommended value.\n        \"%1$s of the sentences contain %2$spassive voice%3$s, \" +\n            \"which is more than the recommended maximum of %4$s. Try to use their active counterparts.\"), percentage + \"%\", passiveVoiceURL, \"</a>\", recommendedValue + \"%\"),\n    };\n};\n/**\n * Marks all sentences that have the passive voice.\n *\n * @param {object} paper The paper to use for the assessment.\n * @param {object} researcher The researcher used for calling research.\n * @returns {object} All marked sentences.\n */\nlet passiveVoiceMarker = function (paper, researcher) {\n    const passiveVoice = researcher.getResearch(\"passiveVoice\");\n    return map(passiveVoice.passives, function (sentence) {\n        sentence = stripTags(sentence);\n        let marked = marker(sentence);\n        return new Mark({\n            original: sentence,\n            marked: marked,\n        });\n    });\n};\n/**\n * Runs the passiveVoice module, based on this returns an assessment result with score and text.\n * @param {object} paper The paper to use for the assessment.\n * @param {object} researcher The researcher used for calling research.\n * @param {object} i18n The object used for translations.\n * @returns {object} the Assessmentresult\n */\nlet passiveVoiceAssessment = function (paper, researcher, i18n) {\n    const passiveVoice = researcher.getResearch(\"passiveVoice\");\n    const passiveVoiceResult = calculatePassiveVoiceResult(passiveVoice, i18n);\n    const assessmentResult = new AssessmentResult();\n    assessmentResult.setScore(passiveVoiceResult.score);\n    assessmentResult.setText(passiveVoiceResult.text);\n    assessmentResult.setHasMarks(passiveVoiceResult.hasMarks);\n    return assessmentResult;\n};\nmodule.exports = {\n    identifier: \"passiveVoice\",\n    getResult: passiveVoiceAssessment,\n    isApplicable: function (paper) {\n        const isLanguageAvailable = getLanguageAvailability(paper.getLocale(), availableLanguages);\n        return (isLanguageAvailable && paper.hasText());\n    },\n    getMarks: passiveVoiceMarker,\n};\n//# sourceMappingURL=passiveVoiceAssessment.js.map"]}