{"version":3,"sources":["../../../js/researches/getPassiveVoice.js"],"names":["getSentences","require","stripHTMLTags","stripFullTags","getLanguage","Sentence","forEach","isPassiveSentencePart","isPassiveSentence","getPeriphrasticSentencePartsDefault","getPeriphrasticSentencePartsGerman","morphologicalLanguages","periphrasticLanguages","getMorphologicalPassives","sentences","language","passiveSentences","sentence","strippedSentence","getSentenceText","toLocaleLowerCase","setPassive","isPassive","push","getPeriphrasticPassives","sentenceParts","passive","sentencePart","getSentencePartText","getAuxiliaries","module","exports","paper","text","getText","locale","getLocale","map","totalNumberSentences","length","includes","total","passives"],"mappings":"AAAA;;AACA,IAAMA,eAAeC,QAAQ,qCAAR,CAArB;AACA,IAAMC,gBAAgBD,QAAQ,sCAAR,EAAgDE,aAAtE;AACA,IAAMC,cAAcH,QAAQ,2BAAR,CAApB;AACA,IAAMI,WAAWJ,QAAQ,uBAAR,CAAjB;AACA,IAAMK,UAAUL,QAAQ,gBAAR,CAAhB;AACA,IAAMM,wBAAwBN,QAAQ,6DAAR,CAA9B;AACA,IAAMO,oBAAoBP,QAAQ,0DAAR,CAA1B;AACA,IAAMQ,sCAAsCR,QAAQ,iDAAR,CAA5C;AACA,IAAMS,qCAAqCT,QAAQ,2CAAR,CAA3C;AACA,IAAMU,yBAAyB,CAAC,IAAD,EAAO,IAAP,CAA/B;AACA,IAAMC,wBAAwB,CAAC,IAAD,EAAO,IAAP,EAAa,IAAb,EAAmB,IAAnB,EAAyB,IAAzB,EAA+B,IAA/B,EAAqC,IAArC,EAA2C,IAA3C,CAA9B;AACA;;;AAGA;;;;;;;AAOA,IAAMC,2BAA2B,SAA3BA,wBAA2B,CAAUC,SAAV,EAAqBC,QAArB,EAA+B;AAC5D,QAAIC,mBAAmB,EAAvB;AACAV,YAAQQ,SAAR,EAAmB,UAAUG,QAAV,EAAoB;AACnC,YAAIC,mBAAmBhB,cAAce,SAASE,eAAT,EAAd,EAA0CC,iBAA1C,EAAvB;AACAH,iBAASI,UAAT,CAAoBb,kBAAkBU,gBAAlB,EAAoCH,QAApC,CAApB;AACA,YAAIE,SAASK,SAAT,OAAyB,IAA7B,EAAmC;AAC/BN,6BAAiBO,IAAjB,CAAsBN,SAASE,eAAT,EAAtB;AACH;AACJ,KAND;AAOA,WAAO;AACHH;AADG,KAAP;AAGH,CAZD;AAaA;;;;;;;AAOA,IAAMQ,0BAA0B,SAA1BA,uBAA0B,CAAUV,SAAV,EAAqBC,QAArB,EAA+B;AAC3D,QAAIC,mBAAmB,EAAvB;AACAV,YAAQQ,SAAR,EAAmB,UAAUG,QAAV,EAAoB;AACnC,YAAIC,mBAAmBhB,cAAce,SAASE,eAAT,EAAd,EAA0CC,iBAA1C,EAAvB;AACA;AACA,YAAIK,gBAAgB,EAApB;AACA,YAAIV,aAAa,IAAjB,EAAuB;AACnBU,4BAAgBf,mCAAmCQ,gBAAnC,CAAhB;AACH,SAFD,MAGK;AACDO,4BAAgBhB,oCAAoCS,gBAApC,EAAsDH,QAAtD,CAAhB;AACH;AACD,YAAIW,UAAU,KAAd;AACApB,gBAAQmB,aAAR,EAAuB,UAAUE,YAAV,EAAwB;AAC3CA,yBAAaN,UAAb,CAAwBd,sBAAsBoB,aAAaC,mBAAb,EAAtB,EAA0DD,aAAaE,cAAb,EAA1D,EAAyFd,QAAzF,CAAxB;AACAW,sBAAUA,WAAWC,aAAaL,SAAb,EAArB;AACH,SAHD;AAIA,YAAII,OAAJ,EAAa;AACTV,6BAAiBO,IAAjB,CAAsBN,SAASE,eAAT,EAAtB;AACH;AACJ,KAlBD;AAmBA,WAAO;AACHH;AADG,KAAP;AAGH,CAxBD;AAyBA;;;;;;AAMAc,OAAOC,OAAP,GAAiB,UAAUC,KAAV,EAAiB;AAC9B,QAAIC,OAAOD,MAAME,OAAN,EAAX;AACA,QAAIC,SAASH,MAAMI,SAAN,EAAb;AACA,QAAIrB,WAAWX,YAAY+B,MAAZ,CAAf;AACA,QAAMrB,YAAYd,aAAaiC,IAAb,EACbI,GADa,CACT,UAAUpB,QAAV,EAAoB;AACzB,eAAO,IAAIZ,QAAJ,CAAaY,QAAb,CAAP;AACH,KAHiB,CAAlB;AAIA,QAAIqB,uBAAuBxB,UAAUyB,MAArC;AACA,QAAI5B,uBAAuB6B,QAAvB,CAAgCzB,QAAhC,CAAJ,EAA+C;AAC3C,eAAO;AACH0B,mBAAOH,oBADJ;AAEHI,sBAAU7B,yBAAyBC,SAAzB,EAAoCC,QAApC,EAA8CC;AAFrD,SAAP;AAIH;AACD,QAAIJ,sBAAsB4B,QAAtB,CAA+BzB,QAA/B,CAAJ,EAA8C;AAC1C,eAAO;AACH0B,mBAAOH,oBADJ;AAEHI,sBAAUlB,wBAAwBV,SAAxB,EAAmCC,QAAnC,EAA6CC;AAFpD,SAAP;AAIH;AACJ,CArBD;AAsBA","file":"getPassiveVoice.js","sourcesContent":["\"use strict\";\nconst getSentences = require(\"../stringProcessing/getSentences.js\");\nconst stripHTMLTags = require(\"../stringProcessing/stripHTMLTags.js\").stripFullTags;\nconst getLanguage = require(\"../helpers/getLanguage.js\");\nconst Sentence = require(\"../values/Sentence.js\");\nconst forEach = require(\"lodash/forEach\");\nconst isPassiveSentencePart = require(\"./passiveVoice/periphrastic/determinePassiveSentencePart.js\");\nconst isPassiveSentence = require(\"./passiveVoice/morphological/determinePassiveSentence.js\");\nconst getPeriphrasticSentencePartsDefault = require(\"./passiveVoice/periphrastic/getSentenceParts.js\");\nconst getPeriphrasticSentencePartsGerman = require(\"./german/passiveVoice/getSentenceParts.js\");\nconst morphologicalLanguages = [\"ru\", \"tr\"];\nconst periphrasticLanguages = [\"en\", \"de\", \"nl\", \"fr\", \"es\", \"it\", \"pt\", \"cn\"];\n/* Languages that employ both morphological and periphrastic passive voice marking have not been implemented yet.\n * const morphologicalAndPeriphrasticLanguages = [ \"sv\", \"da\", \"nb\" ];\n */\n/**\n * Looks for morphological passive voice.\n *\n * @param {Array} sentences Sentences extracted from the text.\n * @param {string} language Language of the text.\n * @returns {Object} The found passive sentences.\n */\nconst getMorphologicalPassives = function (sentences, language) {\n    let passiveSentences = [];\n    forEach(sentences, function (sentence) {\n        let strippedSentence = stripHTMLTags(sentence.getSentenceText()).toLocaleLowerCase();\n        sentence.setPassive(isPassiveSentence(strippedSentence, language));\n        if (sentence.isPassive() === true) {\n            passiveSentences.push(sentence.getSentenceText());\n        }\n    });\n    return {\n        passiveSentences,\n    };\n};\n/**\n * Looks for periphrastic passive voice.\n *\n * @param {Array} sentences Sentences extracted from the text.\n * @param {string} language Language of the text.\n * @returns {Object} The found passive sentences.\n */\nconst getPeriphrasticPassives = function (sentences, language) {\n    let passiveSentences = [];\n    forEach(sentences, function (sentence) {\n        let strippedSentence = stripHTMLTags(sentence.getSentenceText()).toLocaleLowerCase();\n        // The functionality based on sentencePart objects should be rewritten using array indices of stopwords and auxiliaries.\n        let sentenceParts = [];\n        if (language === \"de\") {\n            sentenceParts = getPeriphrasticSentencePartsGerman(strippedSentence);\n        }\n        else {\n            sentenceParts = getPeriphrasticSentencePartsDefault(strippedSentence, language);\n        }\n        let passive = false;\n        forEach(sentenceParts, function (sentencePart) {\n            sentencePart.setPassive(isPassiveSentencePart(sentencePart.getSentencePartText(), sentencePart.getAuxiliaries(), language));\n            passive = passive || sentencePart.isPassive();\n        });\n        if (passive) {\n            passiveSentences.push(sentence.getSentenceText());\n        }\n    });\n    return {\n        passiveSentences,\n    };\n};\n/**\n * Determines the number of passive sentences in the text.\n *\n * @param {Paper} paper The paper object to get the text from.\n * @returns {Object} The total number of sentences in the text and the found passive sentences.\n */\nmodule.exports = function (paper) {\n    let text = paper.getText();\n    let locale = paper.getLocale();\n    let language = getLanguage(locale);\n    const sentences = getSentences(text)\n        .map(function (sentence) {\n        return new Sentence(sentence);\n    });\n    let totalNumberSentences = sentences.length;\n    if (morphologicalLanguages.includes(language)) {\n        return {\n            total: totalNumberSentences,\n            passives: getMorphologicalPassives(sentences, language).passiveSentences,\n        };\n    }\n    if (periphrasticLanguages.includes(language)) {\n        return {\n            total: totalNumberSentences,\n            passives: getPeriphrasticPassives(sentences, language).passiveSentences,\n        };\n    }\n};\n//# sourceMappingURL=getPassiveVoice.js.map"]}