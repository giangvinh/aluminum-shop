"use strict";

var getSentences = require("../stringProcessing/getSentences.js");
var stripHTMLTags = require("../stringProcessing/stripHTMLTags.js").stripFullTags;
var getLanguage = require("../helpers/getLanguage.js");
var Sentence = require("../values/Sentence.js");
var forEach = require("lodash/forEach");
var isPassiveSentencePart = require("./passiveVoice/periphrastic/determinePassiveSentencePart.js");
var isPassiveSentence = require("./passiveVoice/morphological/determinePassiveSentence.js");
var getPeriphrasticSentencePartsDefault = require("./passiveVoice/periphrastic/getSentenceParts.js");
var getPeriphrasticSentencePartsGerman = require("./german/passiveVoice/getSentenceParts.js");
var morphologicalLanguages = ["ru", "tr"];
var periphrasticLanguages = ["en", "de", "nl", "fr", "es", "it", "pt", "cn"];
/* Languages that employ both morphological and periphrastic passive voice marking have not been implemented yet.
 * const morphologicalAndPeriphrasticLanguages = [ "sv", "da", "nb" ];
 */
/**
 * Looks for morphological passive voice.
 *
 * @param {Array} sentences Sentences extracted from the text.
 * @param {string} language Language of the text.
 * @returns {Object} The found passive sentences.
 */
var getMorphologicalPassives = function getMorphologicalPassives(sentences, language) {
    var passiveSentences = [];
    forEach(sentences, function (sentence) {
        var strippedSentence = stripHTMLTags(sentence.getSentenceText()).toLocaleLowerCase();
        sentence.setPassive(isPassiveSentence(strippedSentence, language));
        if (sentence.isPassive() === true) {
            passiveSentences.push(sentence.getSentenceText());
        }
    });
    return {
        passiveSentences: passiveSentences
    };
};
/**
 * Looks for periphrastic passive voice.
 *
 * @param {Array} sentences Sentences extracted from the text.
 * @param {string} language Language of the text.
 * @returns {Object} The found passive sentences.
 */
var getPeriphrasticPassives = function getPeriphrasticPassives(sentences, language) {
    var passiveSentences = [];
    forEach(sentences, function (sentence) {
        var strippedSentence = stripHTMLTags(sentence.getSentenceText()).toLocaleLowerCase();
        // The functionality based on sentencePart objects should be rewritten using array indices of stopwords and auxiliaries.
        var sentenceParts = [];
        if (language === "de") {
            sentenceParts = getPeriphrasticSentencePartsGerman(strippedSentence);
        } else {
            sentenceParts = getPeriphrasticSentencePartsDefault(strippedSentence, language);
        }
        var passive = false;
        forEach(sentenceParts, function (sentencePart) {
            sentencePart.setPassive(isPassiveSentencePart(sentencePart.getSentencePartText(), sentencePart.getAuxiliaries(), language));
            passive = passive || sentencePart.isPassive();
        });
        if (passive) {
            passiveSentences.push(sentence.getSentenceText());
        }
    });
    return {
        passiveSentences: passiveSentences
    };
};
/**
 * Determines the number of passive sentences in the text.
 *
 * @param {Paper} paper The paper object to get the text from.
 * @returns {Object} The total number of sentences in the text and the found passive sentences.
 */
module.exports = function (paper) {
    var text = paper.getText();
    var locale = paper.getLocale();
    var language = getLanguage(locale);
    var sentences = getSentences(text).map(function (sentence) {
        return new Sentence(sentence);
    });
    var totalNumberSentences = sentences.length;
    if (morphologicalLanguages.includes(language)) {
        return {
            total: totalNumberSentences,
            passives: getMorphologicalPassives(sentences, language).passiveSentences
        };
    }
    if (periphrasticLanguages.includes(language)) {
        return {
            total: totalNumberSentences,
            passives: getPeriphrasticPassives(sentences, language).passiveSentences
        };
    }
};
//# sourceMappingURL=getPassiveVoice.js.map
//# sourceMappingURL=getPassiveVoice.js.map
