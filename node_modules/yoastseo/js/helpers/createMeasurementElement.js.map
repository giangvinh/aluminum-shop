{"version":3,"sources":["../../../js/helpers/createMeasurementElement.js"],"names":["Object","defineProperty","exports","value","elementId","createMeasurementElement","hiddenElement","document","createElement","id","style","position","left","top","height","overflow","body","appendChild","measureTextWidth","text","element","getElementById","innerHTML","offsetWidth"],"mappings":"AAAA;;AACAA,OAAOC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C,EAAEC,OAAO,IAAT,EAA7C;AACA,IAAMC,YAAY,2BAAlB;AACA;;;;;AAKA,IAAMC,2BAA2B,SAA3BA,wBAA2B,GAAY;AACzC,QAAMC,gBAAgBC,SAASC,aAAT,CAAuB,KAAvB,CAAtB;AACAF,kBAAcG,EAAd,GAAmBL,SAAnB;AACA;AACAE,kBAAcI,KAAd,CAAoBC,QAApB,GAA+B,UAA/B;AACAL,kBAAcI,KAAd,CAAoBE,IAApB,GAA2B,SAA3B;AACAN,kBAAcI,KAAd,CAAoBG,GAApB,GAA0B,CAA1B;AACAP,kBAAcI,KAAd,CAAoBI,MAApB,GAA6B,CAA7B;AACAR,kBAAcI,KAAd,CAAoBK,QAApB,GAA+B,QAA/B;AACAR,aAASS,IAAT,CAAcC,WAAd,CAA0BX,aAA1B;AACA,WAAOA,aAAP;AACH,CAXD;AAYA;;;;;;AAMAJ,QAAQgB,gBAAR,GAA2B,UAAUC,IAAV,EAAgB;AACvC,QAAIC,UAAUb,SAASc,cAAT,CAAwBjB,SAAxB,CAAd;AACA,QAAI,CAACgB,OAAL,EAAc;AACVA,kBAAUf,0BAAV;AACH;AACDe,YAAQE,SAAR,GAAoBH,IAApB;AACA,WAAOC,QAAQG,WAAf;AACH,CAPD;AAQA","file":"createMeasurementElement.js","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst elementId = \"yoast-measurement-element\";\n/**\n * Creates an hidden element with the purpose to calculate the sizes of elements and adds these elements to the body.\n *\n * @returns {HTMLElement} The created hidden element.\n */\nconst createMeasurementElement = function () {\n    const hiddenElement = document.createElement(\"div\");\n    hiddenElement.id = elementId;\n    // Styles to prevent unintended scrolling in Gutenberg.\n    hiddenElement.style.position = \"absolute\";\n    hiddenElement.style.left = \"-9999em\";\n    hiddenElement.style.top = 0;\n    hiddenElement.style.height = 0;\n    hiddenElement.style.overflow = \"hidden\";\n    document.body.appendChild(hiddenElement);\n    return hiddenElement;\n};\n/**\n * Measures the width of the text using a hidden element.\n *\n * @param {string} text The text to measure the width for.\n * @returns {number} The width in pixels.\n */\nexports.measureTextWidth = function (text) {\n    let element = document.getElementById(elementId);\n    if (!element) {\n        element = createMeasurementElement();\n    }\n    element.innerHTML = text;\n    return element.offsetWidth;\n};\n//# sourceMappingURL=createMeasurementElement.js.map"]}